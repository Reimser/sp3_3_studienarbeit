import streamlit as st
import pandas as pd
import gdown
import os
import matplotlib.pyplot as plt
import seaborn as sns

# üìå Streamlit Page Configuration
st.set_page_config(page_title="Reddit Crypto Dashboard", layout="wide")

# üì• **Google Drive File IDs**
MERGED_CRYPTO_CSV_ID = "12ugApKWh1cJYONcLanpHND9gIdobh-wA"
CRYPTO_PRICES_CSV_ID = "11k9wiflOkqg2DayEgn7iPqNPHC5Qatht"

# üìå **Lokale Dateinamen**
MERGED_CRYPTO_CSV = "app.csv"
CRYPTO_PRICES_CSV = "crypto_prices.csv"

# üî• **Daten herunterladen**
def download_csv(file_id, output):
    url = f"https://drive.google.com/uc?export=download&id={file_id}"
    try:
        gdown.download(url, output, quiet=False, fuzzy=True)  # ‚úÖ Alternative Download-Methode
        if not os.path.exists(output) or os.path.getsize(output) == 0:
            st.error(f"‚ùå Fehler: {output} wurde nicht korrekt heruntergeladen!")
    except Exception as e:
        st.error(f"‚ùå Download fehlgeschlagen: {str(e)}")

# üì• **Daten laden**
download_csv(MERGED_CRYPTO_CSV_ID, MERGED_CRYPTO_CSV)
download_csv(CRYPTO_PRICES_CSV_ID, CRYPTO_PRICES_CSV)

# üìå **CSV-Dateien einlesen**
def load_csv(filepath):
    if not os.path.exists(filepath):
        st.error(f"‚ùå Datei nicht gefunden: {filepath}")
        return pd.DataFrame()
    try:
        return pd.read_csv(filepath, sep="|", encoding="utf-8-sig", on_bad_lines="skip")
    except Exception as e:
        st.error(f"‚ùå Fehler beim Laden von {filepath}: {str(e)}")
        return pd.DataFrame()

df_crypto = load_csv(MERGED_CRYPTO_CSV)
df_prices = load_csv(CRYPTO_PRICES_CSV)

# üìå **Debugging: Dateiinhalt pr√ºfen**
if df_crypto.empty:
    st.error("‚ùå Die CSV-Datei ist leer oder fehlerhaft!")

st.write("‚úÖ CSV-Datei erfolgreich geladen:")
st.write(df_crypto.head())

# üîπ Datentypen korrigieren
df_crypto["date"] = pd.to_datetime(df_crypto["date"], format="%Y-%m-%d", errors="coerce")
df_crypto["crypto"] = df_crypto["crypto"].astype(str)
df_crypto["sentiment"] = df_crypto["sentiment"].astype(str)

# üîç Debugging: Dtypes pr√ºfen
print(df_crypto.dtypes)
print(df_crypto.head())


# üìä **Multi-Tab Navigation mit Kategorien**
tab_home, tab_top, tab_new = st.tabs([
    "üè† Home", "üèÜ Top Coins", "üìà New Coins"
])

# üîπ **üè† HOME (README)**
with tab_home:
    st.title("üìä Reddit Crypto Sentiment Dashboard")
    st.markdown("""
        ## üîç Project Overview
        This dashboard provides a **data-driven analysis of cryptocurrency sentiment** using **Reddit discussions** and **historical price data**.

        ### üîé **Key Features**
        - **üìà Crypto Sentiment Analysis:**  
          - Top mentioned cryptocurrencies & sentiment distribution  
          - Sentiment trends over time (overall & high-confidence)  
          - Combined analysis of sentiment & price dynamics    

        üî• **Use the navigation tabs above to explore sentiment trends & price dynamics!**
    """)

# üìä **Tabs f√ºr verschiedene Krypto-Kategorien**
def crypto_analysis_tab(tab, category, crypto_list):
    with tab:
        st.title(f"{category} Sentiment & Mentions")

        # üîπ Debugging: Alle verf√ºgbaren Kryptow√§hrungen im Datensatz anzeigen
        available_cryptos = df_crypto["crypto"].dropna().unique().tolist()
        print(f"üîç Verf√ºgbare Kryptow√§hrungen im Datensatz: {available_cryptos}")

        selected_crypto = st.selectbox(
            f"Choose a {category} Coin:", crypto_list, key=f"{category.lower()}_crypto"
        )

        # üîπ **Korrekte Filterung basierend auf dem neuen Datensatz**
        df_filtered = df_crypto[df_crypto["crypto"].str.lower() == selected_crypto.lower()]

        # üîç Debugging: Zeige die ersten Zeilen nach der Filterung
        print(f"üìä {category} - Verf√ºgbare Daten f√ºr {selected_crypto}:")
        print(df_filtered.head())

        if df_filtered.empty:
            st.warning(f"‚ö†Ô∏è No data available for {selected_crypto}.")
            return  # `st.stop()` entfernt, um den Code weiterlaufen zu lassen

        # üîπ Anzeige der gefilterten Daten
        st.write(df_filtered)

        # üîπ **1Ô∏è‚É£ Most Discussed Cryptos**
        st.subheader("üî• Top 10 Most Mentioned Cryptocurrencies")
        if "crypto" in df_filtered.columns:
            crypto_counts = df_filtered["crypto"].value_counts().head(10)
            st.bar_chart(crypto_counts)
        else:
            st.warning("‚ö†Ô∏è `crypto` column not found. Skipping this section.")

        # üîπ **2Ô∏è‚É£ Sentiment Distribution per Crypto**
        st.subheader("üí° Sentiment Distribution of Cryptos")
        if "sentiment" in df_filtered.columns:
            sentiment_distribution = df_filtered["sentiment"].value_counts()
            st.bar_chart(sentiment_distribution)
        else:
            st.warning("‚ö†Ô∏è `sentiment` column not found. Skipping this section.")

        # üîπ **3Ô∏è‚É£ Word Count Over Time**
        st.subheader("üìù Word Count Evolution Over Time")
        if "date" in df_filtered.columns:
            wordcount_per_day = df_filtered.groupby("date").size()
            st.line_chart(wordcount_per_day)
        else:
            st.warning("‚ö†Ô∏è `date` column not found. Skipping word count evolution.")

        # üîπ **4Ô∏è‚É£ Sentiment Trend Over Time**
        st.subheader("üìÖ Sentiment Trend Over Time")
        if "sentiment" in df_filtered.columns:
            sentiment_trend = df_filtered.groupby(["date", "sentiment"]).size().unstack(fill_value=0)
            st.line_chart(sentiment_trend)
        else:
            st.warning("‚ö†Ô∏è `sentiment` column not found. Skipping sentiment trends.")

        # üîπ **5Ô∏è‚É£ Word Count & Price Over Time**
        st.subheader("üìä Word Count & Price Over Time")
        if selected_crypto in df_prices["crypto"].values:
            df_price_filtered = df_prices[df_prices["crypto"] == selected_crypto]
            df_combined_dual = df_filtered.groupby("date").size().reset_index(name="word_count")
            df_combined_dual = df_combined_dual.merge(df_price_filtered, on="date", how="inner")

            fig, ax1 = plt.subplots(figsize=(10, 5))
            ax1.set_xlabel("Date")
            ax1.set_ylabel("Word Count", color="blue")
            ax1.plot(df_combined_dual["date"], df_combined_dual["word_count"], color="blue", label="Word Count")
            ax1.tick_params(axis="y", labelcolor="blue")

            ax2 = ax1.twinx()
            ax2.set_ylabel("Price (USD)", color="red")
            ax2.plot(df_combined_dual["date"], df_combined_dual["price"], color="red", label="Price")
            ax2.tick_params(axis="y", labelcolor="red")

            fig.suptitle(f"Word Count & Price for {selected_crypto} Over Time")
            fig.tight_layout()
            st.pyplot(fig)
        else:
            st.warning("‚ö†Ô∏è No price data available for this crypto.")

        # üîπ **6Ô∏è‚É£ Sentiment Confidence Boxplot**
        st.subheader("üìä Sentiment Confidence per Cryptocurrency")
        if "sentiment_confidence" in df_filtered.columns:
            fig, ax = plt.subplots(figsize=(10, 5))
            sns.boxplot(x=df_filtered["sentiment_confidence"], ax=ax)
            ax.set_xlabel("Sentiment Confidence Score")
            st.pyplot(fig)
        else:
            st.warning("‚ö†Ô∏è `sentiment_confidence` column not found. Skipping boxplot.")

        # üîπ **7Ô∏è‚É£ Sentiment Distribution per Crypto (High Confidence)**
        st.subheader("üéØ Sentiment Distribution (High Confidence)")
        CONFIDENCE_THRESHOLD = 0.8
        df_high_conf = df_filtered[df_filtered["sentiment_confidence"] >= CONFIDENCE_THRESHOLD]
        sentiment_dist_high_conf = df_high_conf.groupby(["sentiment"]).size()
        st.bar_chart(sentiment_dist_high_conf)

        # üîπ **8Ô∏è‚É£ High-Confidence Sentiment & Price Over Time**
        st.subheader("üìä High-Confidence Sentiment & Price Over Time")
        if selected_crypto in df_prices["crypto"].values:
            df_high_conf_trend = df_high_conf.groupby(["date", "sentiment"]).size().unstack(fill_value=0)
            df_combined_sentiment_price = df_high_conf_trend.merge(df_price_filtered, on="date", how="inner")

            fig, ax1 = plt.subplots(figsize=(10, 5))
            ax1.set_xlabel("Date")
            ax1.set_ylabel("Sentiment Count (High Confidence)", color="blue")
            ax1.plot(df_combined_sentiment_price.index, df_combined_sentiment_price["bullish"], color="green", label="Bullish (High Confidence)")
            ax1.plot(df_combined_sentiment_price.index, df_combined_sentiment_price["bearish"], color="red", label="Bearish (High Confidence)")
            ax1.tick_params(axis="y", labelcolor="blue")

            ax2 = ax1.twinx()
            ax2.set_ylabel("Price (USD)", color="black")
            ax2.plot(df_combined_sentiment_price.index, df_combined_sentiment_price["price"], color="black", label="Price", linewidth=2)
            ax2.tick_params(axis="y", labelcolor="black")

            fig.suptitle(f"High-Confidence Sentiment & Price for {selected_crypto} Over Time")
            fig.tight_layout()
            st.pyplot(fig)
        else:
            st.warning("‚ö†Ô∏è No high-confidence sentiment price data available.")


# üîπ **Tab f√ºr jede Krypto-Kategorie**
top_coins = [
    "Bitcoin", "Ethereum", "Tether", "Ripple", "Binance Coin", "Solana", 
    "USD Coin", "Dogecoin", "Cardano", "TRON", "Polygon", "XRP", "Cronos"
]
crypto_analysis_tab(tab_top, "Top Coins", top_coins)

new_coins = [
    "NEAR", "MATIC", "Band", "Optimism", "Celestia", "Numerai", 
    "Atheir", "Sui", "HZPE", "Litecoin"
]
crypto_analysis_tab(tab_new, "New Coins", new_coins)